//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace Bifrost.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MarshalByRefObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OracleParameter[]))]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExecuteBatch_SqlSvOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSQL_SqlSvOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSet_SqlSvOperationCompleted;
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectMas_HisTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback His_Mas_GetDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback His_Mas_ReadSqlValOperationCompleted;
        
        private System.Threading.SendOrPostCallback His_Mas_ExcueteSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback His_Mas_ExecuteBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadSqlValOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSQLWithParamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunProcedureOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunProcedureGetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtpMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLableModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLableContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLocalMachinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendmymsgOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemotingIpOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnTryCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPatientDocOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPatientMzDocOperationCompleted;
        
        private System.Threading.SendOrPostCallback upfilebyteOperationCompleted;
        
        private System.Threading.SendOrPostCallback downfilebyteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocXmlByTidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageSourceFilesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Bifrost.Properties.Settings.Default.Leadron_WebReference_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExecuteBatch_SqlSvCompletedEventHandler ExecuteBatch_SqlSvCompleted;
        
        /// <remarks/>
        public event ExecuteSQL_SqlSvCompletedEventHandler ExecuteSQL_SqlSvCompleted;
        
        /// <remarks/>
        public event GetDataSet_SqlSvCompletedEventHandler GetDataSet_SqlSvCompleted;
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event ConnectMas_HisTestCompletedEventHandler ConnectMas_HisTestCompleted;
        
        /// <remarks/>
        public event His_Mas_GetDataSetCompletedEventHandler His_Mas_GetDataSetCompleted;
        
        /// <remarks/>
        public event His_Mas_ReadSqlValCompletedEventHandler His_Mas_ReadSqlValCompleted;
        
        /// <remarks/>
        public event His_Mas_ExcueteSqlCompletedEventHandler His_Mas_ExcueteSqlCompleted;
        
        /// <remarks/>
        public event His_Mas_ExecuteBatchCompletedEventHandler His_Mas_ExecuteBatchCompleted;
        
        /// <remarks/>
        public event GetDataSetCompletedEventHandler GetDataSetCompleted;
        
        /// <remarks/>
        public event GetDataTableCompletedEventHandler GetDataTableCompleted;
        
        /// <remarks/>
        public event GetDataSetsCompletedEventHandler GetDataSetsCompleted;
        
        /// <remarks/>
        public event GetTestTableCompletedEventHandler GetTestTableCompleted;
        
        /// <remarks/>
        public event ReadSqlValCompletedEventHandler ReadSqlValCompleted;
        
        /// <remarks/>
        public event ExecuteSQLCompletedEventHandler ExecuteSQLCompleted;
        
        /// <remarks/>
        public event ConnectTestCompletedEventHandler ConnectTestCompleted;
        
        /// <remarks/>
        public event ExecuteSQLWithParamsCompletedEventHandler ExecuteSQLWithParamsCompleted;
        
        /// <remarks/>
        public event RunProcedureCompletedEventHandler RunProcedureCompleted;
        
        /// <remarks/>
        public event RunProcedureGetDataCompletedEventHandler RunProcedureGetDataCompleted;
        
        /// <remarks/>
        public event GetFtpMessageCompletedEventHandler GetFtpMessageCompleted;
        
        /// <remarks/>
        public event InsertModelCompletedEventHandler InsertModelCompleted;
        
        /// <remarks/>
        public event InsertLableModelCompletedEventHandler InsertLableModelCompleted;
        
        /// <remarks/>
        public event InsertLableContentCompletedEventHandler InsertLableContentCompleted;
        
        /// <remarks/>
        public event ExecuteBatchCompletedEventHandler ExecuteBatchCompleted;
        
        /// <remarks/>
        public event GetAllLocalMachinesCompletedEventHandler GetAllLocalMachinesCompleted;
        
        /// <remarks/>
        public event sendmymsgCompletedEventHandler sendmymsgCompleted;
        
        /// <remarks/>
        public event GetRemotingIpCompletedEventHandler GetRemotingIpCompleted;
        
        /// <remarks/>
        public event EnTryCodeCompletedEventHandler EnTryCodeCompleted;
        
        /// <remarks/>
        public event UploadPatientDocCompletedEventHandler UploadPatientDocCompleted;
        
        /// <remarks/>
        public event UploadPatientMzDocCompletedEventHandler UploadPatientMzDocCompleted;
        
        /// <remarks/>
        public event upfilebyteCompletedEventHandler upfilebyteCompleted;
        
        /// <remarks/>
        public event downfilebyteCompletedEventHandler downfilebyteCompleted;
        
        /// <remarks/>
        public event getDocXmlCompletedEventHandler getDocXmlCompleted;
        
        /// <remarks/>
        public event getDocXmlByTidCompletedEventHandler getDocXmlByTidCompleted;
        
        /// <remarks/>
        public event GetImageSourceFilesCompletedEventHandler GetImageSourceFilesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ExecuteBatch_SqlSv", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteBatch_SqlSv(string[] BatchSql) {
            object[] results = this.Invoke("ExecuteBatch_SqlSv", new object[] {
                        BatchSql});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteBatch_SqlSvAsync(string[] BatchSql) {
            this.ExecuteBatch_SqlSvAsync(BatchSql, null);
        }
        
        /// <remarks/>
        public void ExecuteBatch_SqlSvAsync(string[] BatchSql, object userState) {
            if ((this.ExecuteBatch_SqlSvOperationCompleted == null)) {
                this.ExecuteBatch_SqlSvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteBatch_SqlSvOperationCompleted);
            }
            this.InvokeAsync("ExecuteBatch_SqlSv", new object[] {
                        BatchSql}, this.ExecuteBatch_SqlSvOperationCompleted, userState);
        }
        
        private void OnExecuteBatch_SqlSvOperationCompleted(object arg) {
            if ((this.ExecuteBatch_SqlSvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteBatch_SqlSvCompleted(this, new ExecuteBatch_SqlSvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ExecuteSQL_SqlSv", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteSQL_SqlSv(string CmdString) {
            object[] results = this.Invoke("ExecuteSQL_SqlSv", new object[] {
                        CmdString});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSQL_SqlSvAsync(string CmdString) {
            this.ExecuteSQL_SqlSvAsync(CmdString, null);
        }
        
        /// <remarks/>
        public void ExecuteSQL_SqlSvAsync(string CmdString, object userState) {
            if ((this.ExecuteSQL_SqlSvOperationCompleted == null)) {
                this.ExecuteSQL_SqlSvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQL_SqlSvOperationCompleted);
            }
            this.InvokeAsync("ExecuteSQL_SqlSv", new object[] {
                        CmdString}, this.ExecuteSQL_SqlSvOperationCompleted, userState);
        }
        
        private void OnExecuteSQL_SqlSvOperationCompleted(object arg) {
            if ((this.ExecuteSQL_SqlSvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSQL_SqlSvCompleted(this, new ExecuteSQL_SqlSvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetDataSet_SqlSv", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDataSet_SqlSv(string CmdString) {
            object[] results = this.Invoke("GetDataSet_SqlSv", new object[] {
                        CmdString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSet_SqlSvAsync(string CmdString) {
            this.GetDataSet_SqlSvAsync(CmdString, null);
        }
        
        /// <remarks/>
        public void GetDataSet_SqlSvAsync(string CmdString, object userState) {
            if ((this.GetDataSet_SqlSvOperationCompleted == null)) {
                this.GetDataSet_SqlSvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSet_SqlSvOperationCompleted);
            }
            this.InvokeAsync("GetDataSet_SqlSv", new object[] {
                        CmdString}, this.GetDataSet_SqlSvOperationCompleted, userState);
        }
        
        private void OnGetDataSet_SqlSvOperationCompleted(object arg) {
            if ((this.GetDataSet_SqlSvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSet_SqlSvCompleted(this, new GetDataSet_SqlSvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/HelloWorld", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ConnectMas_HisTest", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConnectMas_HisTest() {
            object[] results = this.Invoke("ConnectMas_HisTest", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectMas_HisTestAsync() {
            this.ConnectMas_HisTestAsync(null);
        }
        
        /// <remarks/>
        public void ConnectMas_HisTestAsync(object userState) {
            if ((this.ConnectMas_HisTestOperationCompleted == null)) {
                this.ConnectMas_HisTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectMas_HisTestOperationCompleted);
            }
            this.InvokeAsync("ConnectMas_HisTest", new object[0], this.ConnectMas_HisTestOperationCompleted, userState);
        }
        
        private void OnConnectMas_HisTestOperationCompleted(object arg) {
            if ((this.ConnectMas_HisTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectMas_HisTestCompleted(this, new ConnectMas_HisTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/His_Mas_GetDataSet", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet His_Mas_GetDataSet(string CmdString) {
            object[] results = this.Invoke("His_Mas_GetDataSet", new object[] {
                        CmdString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void His_Mas_GetDataSetAsync(string CmdString) {
            this.His_Mas_GetDataSetAsync(CmdString, null);
        }
        
        /// <remarks/>
        public void His_Mas_GetDataSetAsync(string CmdString, object userState) {
            if ((this.His_Mas_GetDataSetOperationCompleted == null)) {
                this.His_Mas_GetDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHis_Mas_GetDataSetOperationCompleted);
            }
            this.InvokeAsync("His_Mas_GetDataSet", new object[] {
                        CmdString}, this.His_Mas_GetDataSetOperationCompleted, userState);
        }
        
        private void OnHis_Mas_GetDataSetOperationCompleted(object arg) {
            if ((this.His_Mas_GetDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.His_Mas_GetDataSetCompleted(this, new His_Mas_GetDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/His_Mas_ReadSqlVal", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string His_Mas_ReadSqlVal(string CmdString, int rowindex, string colName) {
            object[] results = this.Invoke("His_Mas_ReadSqlVal", new object[] {
                        CmdString,
                        rowindex,
                        colName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void His_Mas_ReadSqlValAsync(string CmdString, int rowindex, string colName) {
            this.His_Mas_ReadSqlValAsync(CmdString, rowindex, colName, null);
        }
        
        /// <remarks/>
        public void His_Mas_ReadSqlValAsync(string CmdString, int rowindex, string colName, object userState) {
            if ((this.His_Mas_ReadSqlValOperationCompleted == null)) {
                this.His_Mas_ReadSqlValOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHis_Mas_ReadSqlValOperationCompleted);
            }
            this.InvokeAsync("His_Mas_ReadSqlVal", new object[] {
                        CmdString,
                        rowindex,
                        colName}, this.His_Mas_ReadSqlValOperationCompleted, userState);
        }
        
        private void OnHis_Mas_ReadSqlValOperationCompleted(object arg) {
            if ((this.His_Mas_ReadSqlValCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.His_Mas_ReadSqlValCompleted(this, new His_Mas_ReadSqlValCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/His_Mas_ExcueteSql", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int His_Mas_ExcueteSql(string CmdString) {
            object[] results = this.Invoke("His_Mas_ExcueteSql", new object[] {
                        CmdString});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void His_Mas_ExcueteSqlAsync(string CmdString) {
            this.His_Mas_ExcueteSqlAsync(CmdString, null);
        }
        
        /// <remarks/>
        public void His_Mas_ExcueteSqlAsync(string CmdString, object userState) {
            if ((this.His_Mas_ExcueteSqlOperationCompleted == null)) {
                this.His_Mas_ExcueteSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHis_Mas_ExcueteSqlOperationCompleted);
            }
            this.InvokeAsync("His_Mas_ExcueteSql", new object[] {
                        CmdString}, this.His_Mas_ExcueteSqlOperationCompleted, userState);
        }
        
        private void OnHis_Mas_ExcueteSqlOperationCompleted(object arg) {
            if ((this.His_Mas_ExcueteSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.His_Mas_ExcueteSqlCompleted(this, new His_Mas_ExcueteSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/His_Mas_ExecuteBatch", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int His_Mas_ExecuteBatch(string[] BatchSql) {
            object[] results = this.Invoke("His_Mas_ExecuteBatch", new object[] {
                        BatchSql});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void His_Mas_ExecuteBatchAsync(string[] BatchSql) {
            this.His_Mas_ExecuteBatchAsync(BatchSql, null);
        }
        
        /// <remarks/>
        public void His_Mas_ExecuteBatchAsync(string[] BatchSql, object userState) {
            if ((this.His_Mas_ExecuteBatchOperationCompleted == null)) {
                this.His_Mas_ExecuteBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHis_Mas_ExecuteBatchOperationCompleted);
            }
            this.InvokeAsync("His_Mas_ExecuteBatch", new object[] {
                        BatchSql}, this.His_Mas_ExecuteBatchOperationCompleted, userState);
        }
        
        private void OnHis_Mas_ExecuteBatchOperationCompleted(object arg) {
            if ((this.His_Mas_ExecuteBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.His_Mas_ExecuteBatchCompleted(this, new His_Mas_ExecuteBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetDataSet", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDataSet(string CmdString) {
            object[] results = this.Invoke("GetDataSet", new object[] {
                        CmdString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSetAsync(string CmdString) {
            this.GetDataSetAsync(CmdString, null);
        }
        
        /// <remarks/>
        public void GetDataSetAsync(string CmdString, object userState) {
            if ((this.GetDataSetOperationCompleted == null)) {
                this.GetDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetOperationCompleted);
            }
            this.InvokeAsync("GetDataSet", new object[] {
                        CmdString}, this.GetDataSetOperationCompleted, userState);
        }
        
        private void OnGetDataSetOperationCompleted(object arg) {
            if ((this.GetDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetCompleted(this, new GetDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetDataTable", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDataTable(string CmdString) {
            object[] results = this.Invoke("GetDataTable", new object[] {
                        CmdString});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataTableAsync(string CmdString) {
            this.GetDataTableAsync(CmdString, null);
        }
        
        /// <remarks/>
        public void GetDataTableAsync(string CmdString, object userState) {
            if ((this.GetDataTableOperationCompleted == null)) {
                this.GetDataTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataTableOperationCompleted);
            }
            this.InvokeAsync("GetDataTable", new object[] {
                        CmdString}, this.GetDataTableOperationCompleted, userState);
        }
        
        private void OnGetDataTableOperationCompleted(object arg) {
            if ((this.GetDataTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataTableCompleted(this, new GetDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetDataSets", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDataSets(Class_Table[] tabsqls) {
            object[] results = this.Invoke("GetDataSets", new object[] {
                        tabsqls});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSetsAsync(Class_Table[] tabsqls) {
            this.GetDataSetsAsync(tabsqls, null);
        }
        
        /// <remarks/>
        public void GetDataSetsAsync(Class_Table[] tabsqls, object userState) {
            if ((this.GetDataSetsOperationCompleted == null)) {
                this.GetDataSetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetsOperationCompleted);
            }
            this.InvokeAsync("GetDataSets", new object[] {
                        tabsqls}, this.GetDataSetsOperationCompleted, userState);
        }
        
        private void OnGetDataSetsOperationCompleted(object arg) {
            if ((this.GetDataSetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetsCompleted(this, new GetDataSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetTestTable", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTestTable(string tt) {
            object[] results = this.Invoke("GetTestTable", new object[] {
                        tt});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestTableAsync(string tt) {
            this.GetTestTableAsync(tt, null);
        }
        
        /// <remarks/>
        public void GetTestTableAsync(string tt, object userState) {
            if ((this.GetTestTableOperationCompleted == null)) {
                this.GetTestTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestTableOperationCompleted);
            }
            this.InvokeAsync("GetTestTable", new object[] {
                        tt}, this.GetTestTableOperationCompleted, userState);
        }
        
        private void OnGetTestTableOperationCompleted(object arg) {
            if ((this.GetTestTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestTableCompleted(this, new GetTestTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ReadSqlVal", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReadSqlVal(string CmdString, int rowindex, string colName) {
            object[] results = this.Invoke("ReadSqlVal", new object[] {
                        CmdString,
                        rowindex,
                        colName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReadSqlValAsync(string CmdString, int rowindex, string colName) {
            this.ReadSqlValAsync(CmdString, rowindex, colName, null);
        }
        
        /// <remarks/>
        public void ReadSqlValAsync(string CmdString, int rowindex, string colName, object userState) {
            if ((this.ReadSqlValOperationCompleted == null)) {
                this.ReadSqlValOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadSqlValOperationCompleted);
            }
            this.InvokeAsync("ReadSqlVal", new object[] {
                        CmdString,
                        rowindex,
                        colName}, this.ReadSqlValOperationCompleted, userState);
        }
        
        private void OnReadSqlValOperationCompleted(object arg) {
            if ((this.ReadSqlValCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadSqlValCompleted(this, new ReadSqlValCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ExecuteSQL", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteSQL(string CmdString) {
            object[] results = this.Invoke("ExecuteSQL", new object[] {
                        CmdString});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSQLAsync(string CmdString) {
            this.ExecuteSQLAsync(CmdString, null);
        }
        
        /// <remarks/>
        public void ExecuteSQLAsync(string CmdString, object userState) {
            if ((this.ExecuteSQLOperationCompleted == null)) {
                this.ExecuteSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQLOperationCompleted);
            }
            this.InvokeAsync("ExecuteSQL", new object[] {
                        CmdString}, this.ExecuteSQLOperationCompleted, userState);
        }
        
        private void OnExecuteSQLOperationCompleted(object arg) {
            if ((this.ExecuteSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSQLCompleted(this, new ExecuteSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ConnectTest", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConnectTest() {
            object[] results = this.Invoke("ConnectTest", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectTestAsync() {
            this.ConnectTestAsync(null);
        }
        
        /// <remarks/>
        public void ConnectTestAsync(object userState) {
            if ((this.ConnectTestOperationCompleted == null)) {
                this.ConnectTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectTestOperationCompleted);
            }
            this.InvokeAsync("ConnectTest", new object[0], this.ConnectTestOperationCompleted, userState);
        }
        
        private void OnConnectTestOperationCompleted(object arg) {
            if ((this.ConnectTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectTestCompleted(this, new ConnectTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ExecuteSQLWithParams", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteSQLWithParams(string CmdString, OracleParameter[] Parameters) {
            object[] results = this.Invoke("ExecuteSQLWithParams", new object[] {
                        CmdString,
                        Parameters});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSQLWithParamsAsync(string CmdString, OracleParameter[] Parameters) {
            this.ExecuteSQLWithParamsAsync(CmdString, Parameters, null);
        }
        
        /// <remarks/>
        public void ExecuteSQLWithParamsAsync(string CmdString, OracleParameter[] Parameters, object userState) {
            if ((this.ExecuteSQLWithParamsOperationCompleted == null)) {
                this.ExecuteSQLWithParamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQLWithParamsOperationCompleted);
            }
            this.InvokeAsync("ExecuteSQLWithParams", new object[] {
                        CmdString,
                        Parameters}, this.ExecuteSQLWithParamsOperationCompleted, userState);
        }
        
        private void OnExecuteSQLWithParamsOperationCompleted(object arg) {
            if ((this.ExecuteSQLWithParamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSQLWithParamsCompleted(this, new ExecuteSQLWithParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/RunProcedure", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunProcedure(string storedProcName, OracleParameter[] parameters) {
            this.Invoke("RunProcedure", new object[] {
                        storedProcName,
                        parameters});
        }
        
        /// <remarks/>
        public void RunProcedureAsync(string storedProcName, OracleParameter[] parameters) {
            this.RunProcedureAsync(storedProcName, parameters, null);
        }
        
        /// <remarks/>
        public void RunProcedureAsync(string storedProcName, OracleParameter[] parameters, object userState) {
            if ((this.RunProcedureOperationCompleted == null)) {
                this.RunProcedureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunProcedureOperationCompleted);
            }
            this.InvokeAsync("RunProcedure", new object[] {
                        storedProcName,
                        parameters}, this.RunProcedureOperationCompleted, userState);
        }
        
        private void OnRunProcedureOperationCompleted(object arg) {
            if ((this.RunProcedureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunProcedureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/RunProcedureGetData", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RunProcedureGetData(string storedProcName, OracleParameter[] parameters) {
            object[] results = this.Invoke("RunProcedureGetData", new object[] {
                        storedProcName,
                        parameters});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RunProcedureGetDataAsync(string storedProcName, OracleParameter[] parameters) {
            this.RunProcedureGetDataAsync(storedProcName, parameters, null);
        }
        
        /// <remarks/>
        public void RunProcedureGetDataAsync(string storedProcName, OracleParameter[] parameters, object userState) {
            if ((this.RunProcedureGetDataOperationCompleted == null)) {
                this.RunProcedureGetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunProcedureGetDataOperationCompleted);
            }
            this.InvokeAsync("RunProcedureGetData", new object[] {
                        storedProcName,
                        parameters}, this.RunProcedureGetDataOperationCompleted, userState);
        }
        
        private void OnRunProcedureGetDataOperationCompleted(object arg) {
            if ((this.RunProcedureGetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunProcedureGetDataCompleted(this, new RunProcedureGetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetFtpMessage", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFtpMessage() {
            object[] results = this.Invoke("GetFtpMessage", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFtpMessageAsync() {
            this.GetFtpMessageAsync(null);
        }
        
        /// <remarks/>
        public void GetFtpMessageAsync(object userState) {
            if ((this.GetFtpMessageOperationCompleted == null)) {
                this.GetFtpMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtpMessageOperationCompleted);
            }
            this.InvokeAsync("GetFtpMessage", new object[0], this.GetFtpMessageOperationCompleted, userState);
        }
        
        private void OnGetFtpMessageOperationCompleted(object arg) {
            if ((this.GetFtpMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtpMessageCompleted(this, new GetFtpMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/InsertModel", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertModel(string PID, int textKind_ID, System.Xml.XmlNode xmlDoc, int belongToSys_ID, int sickKind_ID, string textName) {
            object[] results = this.Invoke("InsertModel", new object[] {
                        PID,
                        textKind_ID,
                        xmlDoc,
                        belongToSys_ID,
                        sickKind_ID,
                        textName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertModelAsync(string PID, int textKind_ID, System.Xml.XmlNode xmlDoc, int belongToSys_ID, int sickKind_ID, string textName) {
            this.InsertModelAsync(PID, textKind_ID, xmlDoc, belongToSys_ID, sickKind_ID, textName, null);
        }
        
        /// <remarks/>
        public void InsertModelAsync(string PID, int textKind_ID, System.Xml.XmlNode xmlDoc, int belongToSys_ID, int sickKind_ID, string textName, object userState) {
            if ((this.InsertModelOperationCompleted == null)) {
                this.InsertModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertModelOperationCompleted);
            }
            this.InvokeAsync("InsertModel", new object[] {
                        PID,
                        textKind_ID,
                        xmlDoc,
                        belongToSys_ID,
                        sickKind_ID,
                        textName}, this.InsertModelOperationCompleted, userState);
        }
        
        private void OnInsertModelOperationCompleted(object arg) {
            if ((this.InsertModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertModelCompleted(this, new InsertModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/InsertLableModel", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertLableModel(int tid, System.Xml.XmlNode xmlDoc) {
            object[] results = this.Invoke("InsertLableModel", new object[] {
                        tid,
                        xmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLableModelAsync(int tid, System.Xml.XmlNode xmlDoc) {
            this.InsertLableModelAsync(tid, xmlDoc, null);
        }
        
        /// <remarks/>
        public void InsertLableModelAsync(int tid, System.Xml.XmlNode xmlDoc, object userState) {
            if ((this.InsertLableModelOperationCompleted == null)) {
                this.InsertLableModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLableModelOperationCompleted);
            }
            this.InvokeAsync("InsertLableModel", new object[] {
                        tid,
                        xmlDoc}, this.InsertLableModelOperationCompleted, userState);
        }
        
        private void OnInsertLableModelOperationCompleted(object arg) {
            if ((this.InsertLableModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLableModelCompleted(this, new InsertLableModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/InsertLableContent", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertLableContent(int tid, System.Xml.XmlNode xmlDoc) {
            object[] results = this.Invoke("InsertLableContent", new object[] {
                        tid,
                        xmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLableContentAsync(int tid, System.Xml.XmlNode xmlDoc) {
            this.InsertLableContentAsync(tid, xmlDoc, null);
        }
        
        /// <remarks/>
        public void InsertLableContentAsync(int tid, System.Xml.XmlNode xmlDoc, object userState) {
            if ((this.InsertLableContentOperationCompleted == null)) {
                this.InsertLableContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLableContentOperationCompleted);
            }
            this.InvokeAsync("InsertLableContent", new object[] {
                        tid,
                        xmlDoc}, this.InsertLableContentOperationCompleted, userState);
        }
        
        private void OnInsertLableContentOperationCompleted(object arg) {
            if ((this.InsertLableContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLableContentCompleted(this, new InsertLableContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/ExecuteBatch", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteBatch(string[] BatchSql) {
            object[] results = this.Invoke("ExecuteBatch", new object[] {
                        BatchSql});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteBatchAsync(string[] BatchSql) {
            this.ExecuteBatchAsync(BatchSql, null);
        }
        
        /// <remarks/>
        public void ExecuteBatchAsync(string[] BatchSql, object userState) {
            if ((this.ExecuteBatchOperationCompleted == null)) {
                this.ExecuteBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteBatchOperationCompleted);
            }
            this.InvokeAsync("ExecuteBatch", new object[] {
                        BatchSql}, this.ExecuteBatchOperationCompleted, userState);
        }
        
        private void OnExecuteBatchOperationCompleted(object arg) {
            if ((this.ExecuteBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteBatchCompleted(this, new ExecuteBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetAllLocalMachines", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetAllLocalMachines() {
            object[] results = this.Invoke("GetAllLocalMachines", new object[0]);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLocalMachinesAsync() {
            this.GetAllLocalMachinesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllLocalMachinesAsync(object userState) {
            if ((this.GetAllLocalMachinesOperationCompleted == null)) {
                this.GetAllLocalMachinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLocalMachinesOperationCompleted);
            }
            this.InvokeAsync("GetAllLocalMachines", new object[0], this.GetAllLocalMachinesOperationCompleted, userState);
        }
        
        private void OnGetAllLocalMachinesOperationCompleted(object arg) {
            if ((this.GetAllLocalMachinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLocalMachinesCompleted(this, new GetAllLocalMachinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/sendmymsg", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendmymsg(string message, string currentip) {
            this.Invoke("sendmymsg", new object[] {
                        message,
                        currentip});
        }
        
        /// <remarks/>
        public void sendmymsgAsync(string message, string currentip) {
            this.sendmymsgAsync(message, currentip, null);
        }
        
        /// <remarks/>
        public void sendmymsgAsync(string message, string currentip, object userState) {
            if ((this.sendmymsgOperationCompleted == null)) {
                this.sendmymsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendmymsgOperationCompleted);
            }
            this.InvokeAsync("sendmymsg", new object[] {
                        message,
                        currentip}, this.sendmymsgOperationCompleted, userState);
        }
        
        private void OnsendmymsgOperationCompleted(object arg) {
            if ((this.sendmymsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendmymsgCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetRemotingIp", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRemotingIp() {
            object[] results = this.Invoke("GetRemotingIp", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemotingIpAsync() {
            this.GetRemotingIpAsync(null);
        }
        
        /// <remarks/>
        public void GetRemotingIpAsync(object userState) {
            if ((this.GetRemotingIpOperationCompleted == null)) {
                this.GetRemotingIpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemotingIpOperationCompleted);
            }
            this.InvokeAsync("GetRemotingIp", new object[0], this.GetRemotingIpOperationCompleted, userState);
        }
        
        private void OnGetRemotingIpOperationCompleted(object arg) {
            if ((this.GetRemotingIpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemotingIpCompleted(this, new GetRemotingIpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/EnTryCode", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EnTryCode(string Val) {
            object[] results = this.Invoke("EnTryCode", new object[] {
                        Val});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnTryCodeAsync(string Val) {
            this.EnTryCodeAsync(Val, null);
        }
        
        /// <remarks/>
        public void EnTryCodeAsync(string Val, object userState) {
            if ((this.EnTryCodeOperationCompleted == null)) {
                this.EnTryCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnTryCodeOperationCompleted);
            }
            this.InvokeAsync("EnTryCode", new object[] {
                        Val}, this.EnTryCodeOperationCompleted, userState);
        }
        
        private void OnEnTryCodeOperationCompleted(object arg) {
            if ((this.EnTryCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnTryCodeCompleted(this, new EnTryCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/UploadPatientDoc", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadPatientDoc(string XmlDoc, string DocName, string PatientId) {
            object[] results = this.Invoke("UploadPatientDoc", new object[] {
                        XmlDoc,
                        DocName,
                        PatientId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadPatientDocAsync(string XmlDoc, string DocName, string PatientId) {
            this.UploadPatientDocAsync(XmlDoc, DocName, PatientId, null);
        }
        
        /// <remarks/>
        public void UploadPatientDocAsync(string XmlDoc, string DocName, string PatientId, object userState) {
            if ((this.UploadPatientDocOperationCompleted == null)) {
                this.UploadPatientDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPatientDocOperationCompleted);
            }
            this.InvokeAsync("UploadPatientDoc", new object[] {
                        XmlDoc,
                        DocName,
                        PatientId}, this.UploadPatientDocOperationCompleted, userState);
        }
        
        private void OnUploadPatientDocOperationCompleted(object arg) {
            if ((this.UploadPatientDocCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPatientDocCompleted(this, new UploadPatientDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/UploadPatientMzDoc", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadPatientMzDoc(string XmlDoc, string DocName, string PatientId) {
            object[] results = this.Invoke("UploadPatientMzDoc", new object[] {
                        XmlDoc,
                        DocName,
                        PatientId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadPatientMzDocAsync(string XmlDoc, string DocName, string PatientId) {
            this.UploadPatientMzDocAsync(XmlDoc, DocName, PatientId, null);
        }
        
        /// <remarks/>
        public void UploadPatientMzDocAsync(string XmlDoc, string DocName, string PatientId, object userState) {
            if ((this.UploadPatientMzDocOperationCompleted == null)) {
                this.UploadPatientMzDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPatientMzDocOperationCompleted);
            }
            this.InvokeAsync("UploadPatientMzDoc", new object[] {
                        XmlDoc,
                        DocName,
                        PatientId}, this.UploadPatientMzDocOperationCompleted, userState);
        }
        
        private void OnUploadPatientMzDocOperationCompleted(object arg) {
            if ((this.UploadPatientMzDocCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPatientMzDocCompleted(this, new UploadPatientMzDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/upfilebyte", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string upfilebyte([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] b, string DocName, string PatientId) {
            object[] results = this.Invoke("upfilebyte", new object[] {
                        b,
                        DocName,
                        PatientId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void upfilebyteAsync(byte[] b, string DocName, string PatientId) {
            this.upfilebyteAsync(b, DocName, PatientId, null);
        }
        
        /// <remarks/>
        public void upfilebyteAsync(byte[] b, string DocName, string PatientId, object userState) {
            if ((this.upfilebyteOperationCompleted == null)) {
                this.upfilebyteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupfilebyteOperationCompleted);
            }
            this.InvokeAsync("upfilebyte", new object[] {
                        b,
                        DocName,
                        PatientId}, this.upfilebyteOperationCompleted, userState);
        }
        
        private void OnupfilebyteOperationCompleted(object arg) {
            if ((this.upfilebyteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.upfilebyteCompleted(this, new upfilebyteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/downfilebyte", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] downfilebyte(string DocName, string PatientId) {
            object[] results = this.Invoke("downfilebyte", new object[] {
                        DocName,
                        PatientId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void downfilebyteAsync(string DocName, string PatientId) {
            this.downfilebyteAsync(DocName, PatientId, null);
        }
        
        /// <remarks/>
        public void downfilebyteAsync(string DocName, string PatientId, object userState) {
            if ((this.downfilebyteOperationCompleted == null)) {
                this.downfilebyteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownfilebyteOperationCompleted);
            }
            this.InvokeAsync("downfilebyte", new object[] {
                        DocName,
                        PatientId}, this.downfilebyteOperationCompleted, userState);
        }
        
        private void OndownfilebyteOperationCompleted(object arg) {
            if ((this.downfilebyteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downfilebyteCompleted(this, new downfilebyteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/getDocXml", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDocXml(string pid) {
            object[] results = this.Invoke("getDocXml", new object[] {
                        pid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDocXmlAsync(string pid) {
            this.getDocXmlAsync(pid, null);
        }
        
        /// <remarks/>
        public void getDocXmlAsync(string pid, object userState) {
            if ((this.getDocXmlOperationCompleted == null)) {
                this.getDocXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocXmlOperationCompleted);
            }
            this.InvokeAsync("getDocXml", new object[] {
                        pid}, this.getDocXmlOperationCompleted, userState);
        }
        
        private void OngetDocXmlOperationCompleted(object arg) {
            if ((this.getDocXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocXmlCompleted(this, new getDocXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/getDocXmlByTid", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDocXmlByTid(string patient_id, string file_no) {
            object[] results = this.Invoke("getDocXmlByTid", new object[] {
                        patient_id,
                        file_no});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDocXmlByTidAsync(string patient_id, string file_no) {
            this.getDocXmlByTidAsync(patient_id, file_no, null);
        }
        
        /// <remarks/>
        public void getDocXmlByTidAsync(string patient_id, string file_no, object userState) {
            if ((this.getDocXmlByTidOperationCompleted == null)) {
                this.getDocXmlByTidOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocXmlByTidOperationCompleted);
            }
            this.InvokeAsync("getDocXmlByTid", new object[] {
                        patient_id,
                        file_no}, this.getDocXmlByTidOperationCompleted, userState);
        }
        
        private void OngetDocXmlByTidOperationCompleted(object arg) {
            if ((this.getDocXmlByTidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocXmlByTidCompleted(this, new getDocXmlByTidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://192.168.1.70/WebSite4/Service.asmx/GetImageSourceFiles", RequestNamespace="http://192.168.1.70/WebSite4/Service.asmx", ResponseNamespace="http://192.168.1.70/WebSite4/Service.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetImageSourceFiles() {
            object[] results = this.Invoke("GetImageSourceFiles", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImageSourceFilesAsync() {
            this.GetImageSourceFilesAsync(null);
        }
        
        /// <remarks/>
        public void GetImageSourceFilesAsync(object userState) {
            if ((this.GetImageSourceFilesOperationCompleted == null)) {
                this.GetImageSourceFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageSourceFilesOperationCompleted);
            }
            this.InvokeAsync("GetImageSourceFiles", new object[0], this.GetImageSourceFilesOperationCompleted, userState);
        }
        
        private void OnGetImageSourceFilesOperationCompleted(object arg) {
            if ((this.GetImageSourceFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageSourceFilesCompleted(this, new GetImageSourceFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public partial class Class_Table {
        
        private string sqlField;
        
        private string tablenameField;
        
        /// <remarks/>
        public string Sql {
            get {
                return this.sqlField;
            }
            set {
                this.sqlField = value;
            }
        }
        
        /// <remarks/>
        public string Tablename {
            get {
                return this.tablenameField;
            }
            set {
                this.tablenameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DbParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OracleParameter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public abstract partial class MarshalByRefObject {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OracleParameter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public abstract partial class DbParameter : MarshalByRefObject {
        
        private DbType dbTypeField;
        
        private ParameterDirection directionField;
        
        private bool isNullableField;
        
        private string parameterNameField;
        
        private byte precisionField;
        
        private byte scaleField;
        
        private int sizeField;
        
        private string sourceColumnField;
        
        private bool sourceColumnNullMappingField;
        
        private DataRowVersion sourceVersionField;
        
        private object valueField;
        
        public DbParameter() {
            this.directionField = ParameterDirection.Input;
            this.parameterNameField = "";
            this.sourceColumnField = "";
            this.sourceColumnNullMappingField = false;
            this.sourceVersionField = DataRowVersion.Current;
        }
        
        /// <remarks/>
        public DbType DbType {
            get {
                return this.dbTypeField;
            }
            set {
                this.dbTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(ParameterDirection.Input)]
        public ParameterDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNullable {
            get {
                return this.isNullableField;
            }
            set {
                this.isNullableField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string ParameterName {
            get {
                return this.parameterNameField;
            }
            set {
                this.parameterNameField = value;
            }
        }
        
        /// <remarks/>
        public byte Precision {
            get {
                return this.precisionField;
            }
            set {
                this.precisionField = value;
            }
        }
        
        /// <remarks/>
        public byte Scale {
            get {
                return this.scaleField;
            }
            set {
                this.scaleField = value;
            }
        }
        
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string SourceColumn {
            get {
                return this.sourceColumnField;
            }
            set {
                this.sourceColumnField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool SourceColumnNullMapping {
            get {
                return this.sourceColumnNullMappingField;
            }
            set {
                this.sourceColumnNullMappingField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(DataRowVersion.Current)]
        public DataRowVersion SourceVersion {
            get {
                return this.sourceVersionField;
            }
            set {
                this.sourceVersionField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public enum DbType {
        
        /// <remarks/>
        AnsiString,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Int64,
        
        /// <remarks/>
        Object,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        UInt64,
        
        /// <remarks/>
        VarNumeric,
        
        /// <remarks/>
        AnsiStringFixedLength,
        
        /// <remarks/>
        StringFixedLength,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public enum ParameterDirection {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        ReturnValue,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public enum DataRowVersion {
        
        /// <remarks/>
        Original,
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        Proposed,
        
        /// <remarks/>
        Default,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public partial class OracleParameter : DbParameter {
        
        private OracleType oracleTypeField;
        
        private int offsetField;
        
        public OracleParameter() {
            this.oracleTypeField = OracleType.VarChar;
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(OracleType.VarChar)]
        public OracleType OracleType {
            get {
                return this.oracleTypeField;
            }
            set {
                this.oracleTypeField = value;
            }
        }
        
        /// <remarks/>
        public int Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://192.168.1.70/WebSite4/Service.asmx")]
    public enum OracleType {
        
        /// <remarks/>
        BFile,
        
        /// <remarks/>
        Blob,
        
        /// <remarks/>
        Char,
        
        /// <remarks/>
        Clob,
        
        /// <remarks/>
        Cursor,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        IntervalDayToSecond,
        
        /// <remarks/>
        IntervalYearToMonth,
        
        /// <remarks/>
        LongRaw,
        
        /// <remarks/>
        LongVarChar,
        
        /// <remarks/>
        NChar,
        
        /// <remarks/>
        NClob,
        
        /// <remarks/>
        Number,
        
        /// <remarks/>
        NVarChar,
        
        /// <remarks/>
        Raw,
        
        /// <remarks/>
        RowId,
        
        /// <remarks/>
        Timestamp,
        
        /// <remarks/>
        TimestampLocal,
        
        /// <remarks/>
        TimestampWithTZ,
        
        /// <remarks/>
        VarChar,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Float,
        
        /// <remarks/>
        Double,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ExecuteBatch_SqlSvCompletedEventHandler(object sender, ExecuteBatch_SqlSvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteBatch_SqlSvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteBatch_SqlSvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ExecuteSQL_SqlSvCompletedEventHandler(object sender, ExecuteSQL_SqlSvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSQL_SqlSvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSQL_SqlSvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetDataSet_SqlSvCompletedEventHandler(object sender, GetDataSet_SqlSvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSet_SqlSvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSet_SqlSvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ConnectMas_HisTestCompletedEventHandler(object sender, ConnectMas_HisTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectMas_HisTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectMas_HisTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void His_Mas_GetDataSetCompletedEventHandler(object sender, His_Mas_GetDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class His_Mas_GetDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal His_Mas_GetDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void His_Mas_ReadSqlValCompletedEventHandler(object sender, His_Mas_ReadSqlValCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class His_Mas_ReadSqlValCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal His_Mas_ReadSqlValCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void His_Mas_ExcueteSqlCompletedEventHandler(object sender, His_Mas_ExcueteSqlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class His_Mas_ExcueteSqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal His_Mas_ExcueteSqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void His_Mas_ExecuteBatchCompletedEventHandler(object sender, His_Mas_ExecuteBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class His_Mas_ExecuteBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal His_Mas_ExecuteBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetDataSetCompletedEventHandler(object sender, GetDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetDataTableCompletedEventHandler(object sender, GetDataTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetDataSetsCompletedEventHandler(object sender, GetDataSetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTestTableCompletedEventHandler(object sender, GetTestTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ReadSqlValCompletedEventHandler(object sender, ReadSqlValCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadSqlValCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadSqlValCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ExecuteSQLCompletedEventHandler(object sender, ExecuteSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ConnectTestCompletedEventHandler(object sender, ConnectTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ExecuteSQLWithParamsCompletedEventHandler(object sender, ExecuteSQLWithParamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSQLWithParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSQLWithParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void RunProcedureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void RunProcedureGetDataCompletedEventHandler(object sender, RunProcedureGetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunProcedureGetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunProcedureGetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetFtpMessageCompletedEventHandler(object sender, GetFtpMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtpMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtpMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertModelCompletedEventHandler(object sender, InsertModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertLableModelCompletedEventHandler(object sender, InsertLableModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLableModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLableModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertLableContentCompletedEventHandler(object sender, InsertLableContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLableContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLableContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ExecuteBatchCompletedEventHandler(object sender, ExecuteBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetAllLocalMachinesCompletedEventHandler(object sender, GetAllLocalMachinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLocalMachinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLocalMachinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendmymsgCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetRemotingIpCompletedEventHandler(object sender, GetRemotingIpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemotingIpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemotingIpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void EnTryCodeCompletedEventHandler(object sender, EnTryCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnTryCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnTryCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadPatientDocCompletedEventHandler(object sender, UploadPatientDocCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadPatientDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadPatientDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadPatientMzDocCompletedEventHandler(object sender, UploadPatientMzDocCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadPatientMzDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadPatientMzDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void upfilebyteCompletedEventHandler(object sender, upfilebyteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class upfilebyteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal upfilebyteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void downfilebyteCompletedEventHandler(object sender, downfilebyteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downfilebyteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downfilebyteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void getDocXmlCompletedEventHandler(object sender, getDocXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void getDocXmlByTidCompletedEventHandler(object sender, getDocXmlByTidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocXmlByTidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocXmlByTidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetImageSourceFilesCompletedEventHandler(object sender, GetImageSourceFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageSourceFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageSourceFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591