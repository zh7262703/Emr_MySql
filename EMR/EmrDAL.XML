<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EmrDAL</name>
    </assembly>
    <members>
        <member name="T:EmrDAL.CrudFactory`1">
            <summary>
            Crud工厂类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EmrDAL.CrudFactory`1.Create">
             <summary>
            返回用于获取T的更删改查的Sql的类
             </summary>
             <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Insert``1(``0)">
            <summary>
            向表插入一条记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Delete``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            删除表中符合条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Update``1(``0)">
            <summary>
            更新表中的一条记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.UpdateAll``1(System.Linq.Expressions.Expression{System.Predicate{``0}},System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            更新表中符合条件的所有记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="match"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.FindAll``1(System.Linq.Expressions.Expression{System.Predicate{``0}},System.Int32,System.String)">
            <summary>
            返回表中符合条件的前rownum行记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="match"></param>
            <param name="rownum"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.GetMax``1(System.String,System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            返回表中符合条件的某一列的最大值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="colname"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.GetMin``1(System.String,System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            返回表中符合条件某一列的最小值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="colname"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.GetFirstValue``2(System.String,System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            获取表中符合条件的第一条记录的某一列的值
            </summary>
            <typeparam name="T1">实体类</typeparam>
            <typeparam name="T2">返回值类型</typeparam>
            <param name="colname">列名</param>
            <param name="match">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.GetFirstValue``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            返回符合条件的结果中的第一条记录的某列的值
            </summary>
            <typeparam name="TEntity">查询的实体类</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求表中某列符合条件的最大值
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的某列的最小值
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的某列的和
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的记录条数
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的某列的平均值
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DAL.Aggregate``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            聚合函数
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="method"></param>
            <param name="resultExpr"></param>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="T:EmrDAL.DbCud">
            <summary>
            增、删、改操作类
            </summary>
        </member>
        <member name="M:EmrDAL.DbCud.Insert``1(``0)">
            <summary>
            将实体类插入到数据库中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbCud.Insert``1(``0,System.String[])">
            <summary>
            插入带有Clob字段的实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="clobNames"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbCud.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            将实体数据更新到表中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbCud.UpdateCols``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            将部分列数据更新到表中(更新的列含Clob字段)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="colsExpr">需要更新的列的表达式</param>
            <param name="whereExpr">过滤条件</param>
            <param name="clobNames">clob列的列名集合</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbCud.UpdateCols``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            将部分列数据更新到表中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="colsExpr">需要更新的列的表达式</param>
            <param name="whereExpr">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbCud.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除表中符合条件的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
        <member name="T:EmrDAL.DbQuery">
            <summary>
            查询操作类
            </summary>
        </member>
        <member name="M:EmrDAL.DbQuery.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的某列的平均值
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的记录条数
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的记录条数
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.ExistsQuery``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            根据条件查询数据
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TExists"></typeparam>
            <param name="whereExpr">where表达式</param>
            <param name="existsExpr">存在表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.First``1(System.String)">
            <summary>
            将查询出来的第一条数据转成T实体类
            </summary>
            <typeparam name="T"></typeparam>
            <param name="SQL">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            将查询出来的第一条数据转成T实体类
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereExpr">表达式查询条件</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.FirstValue``1(System.String)">
            <summary>
            根据SQL语句获取一个指定类型的值
            </summary>
            <typeparam name="TResult">结果的类型</typeparam>
            <param name="SQL">传入的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.FirstValue``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            将查询结果转换成指定的值类型
            </summary>
            <typeparam name="TEntity">查询对象</typeparam>
            <typeparam name="TResult">输出对象类型</typeparam>
            <param name="whereExpr">条件表达式</param>
            <param name="colname">查询列名</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.FirstValue``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            将查询结果转换成指定的值类型
            </summary>
            <typeparam name="TEntity">查询对象</typeparam>
            <typeparam name="TResult">输出对象类型</typeparam>
            <param name="whereExpr">条件表达式</param>
            <param name="colExpr">查询列表达式</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EmrDAL.DbQuery.InnerJoinQuery``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})" -->
        <member name="M:EmrDAL.DbQuery.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求表中某列符合条件的最大值
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的某列的最小值
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Query``1">
            <summary>
            获取实体类映射的表的全部数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Query``1(System.String)">
            <summary>
            传入SQL查询 输出T泛型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="SQL">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Query(System.String,System.Func{System.Data.DataRow,System.Object})">
            <summary>
            根据SQL查询
            返回选择的结果
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="resultExpr">选择表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查询对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereExpr">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Func{System.Data.DataRow,System.Object})">
            <summary>
            查询对象返回对象里的部分列
            </summary>
            <typeparam name="T">被查询对象</typeparam>
            <param name="whereExpr">where表达式</param>
            <param name="selectExpr">筛选结果表达式</param>
            <param name="resultFunc">返回结果表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Query``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            查询TEntity的数据 筛选部分数据转成TResult泛型集合
            </summary>
            <typeparam name="TEntity">被查询对象</typeparam>
            <typeparam name="TResult">输出对象</typeparam>
            <param name="whereExpr"></param>
            <param name="selectExpr"></param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            求符合条件的某列的和
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
            <param name="resultExpr">列表达式</param>
            <param name="whereExpr">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:EmrDAL.DbQuery.Aggregate``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            聚合函数
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="method"></param>
            <param name="resultExpr"></param>
            <param name="whereExpr"></param>
            <returns></returns>
        </member>
    </members>
</doc>
